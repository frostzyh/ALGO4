See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (2 warnings)
PMD:          FAILED (3 warnings)
Checkstyle:   FAILED (0 errors, 132 warnings)

Correctness:  44/45 tests passed
Memory:       3/3 tests passed
Timing:       110/125 tests passed

Aggregate score: 96.27%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
6.1K Jul 18 08:38 Board.java
3.3K Jul 18 08:38 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
H C RC_REF_COMPARISON RC: Uses reference equality to compare two objects of type 'Integer'. Did you mean to use object equality and call the 'equals()' method?  At Board.java:[line 125]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'helper()' is never called.  At Solver.java:[lines 65-70]
Warnings generated: 2

================================================================


% pmd *.java
*-----------------------------------------------------------
Solver.java:64: Avoid unused private methods, such as 'helper(MinPQ,Node)'. [UnusedPrivateMethod]
Solver.java:83: The private instance (or static) variable 'b' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:84: The private instance (or static) variable 'p' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:1:1: Unnecessary import statement for 'java.lang.StringBuilder' because it is from the package 'java.lang'. [RedundantImport]
[WARN] Board.java:1:8: Unused import statement for 'java.lang.StringBuilder'. [UnusedImports]
[WARN] Board.java:7:13: Use the primitive type instead of the corresponding wrapper type. For example, use 'boolean' instead of 'Boolean'. [MyIllegalType]
[WARN] Board.java:8:13: Use the primitive type instead of the corresponding wrapper type. For example, use 'boolean' instead of 'Boolean'. [MyIllegalType]
[WARN] Board.java:9:23: The instance variable 'emp_x' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:10:23: The instance variable 'emp_y' must start with a lowercase letter and use camelCase. [MemberName]
[WARN] Board.java:12:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:20:13: The local variable 'e_x' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:21:13: The local variable 'e_y' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] Board.java:23:26: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:23:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:24:23: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:24:24: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:24:28: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:24:29: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:24:36: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:26:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:38:27: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:43:25: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:47:26: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:47:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:48:23: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:48:24: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:48:28: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:48:29: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:48:36: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:60:27: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:63:36: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:64:23: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:64:24: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:64:28: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:64:29: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:64:36: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:67:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:82:28: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:87:24: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:92:11: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:93:21: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:93:35: '{' is not preceded with whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 130 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------
[WARN] Board.java:136:29: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [IllegalMethodCall]
[WARN] Board.java:136:52: Calling the 'toString()' method in equals()' will slow down the 'equals()' method substantially. [IllegalMethodCall]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
    - failed after 9 calls to random methods in Board
    - first call to student equals() = true
    - last  call to student equals() = false
    - any call to reference equals() = true
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
    - failed after 22 calls to random methods in Board
    - first call to student equals() = true
    - last  call to student equals() = false
    - any call to reference equals() = true
    - failed on trial 1 of 100

  * 3-by-3
    - failed after 5 calls to random methods in Board
    - first call to student equals() = true
    - last  call to student equals() = false
    - any call to reference equals() = true
    - failed on trial 1 of 100

  * 4-by-4
    - failed after 24 calls to random methods in Board
    - first call to student equals() = true
    - last  call to student equals() = false
    - any call to reference equals() = true
    - failed on trial 2 of 100

==> FAILED

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 21/22 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: call solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: call moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: call solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9: check whether equals() method in Board is called
        with an argument of the wrong type
  * puzzle00.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 10: check that constructor throws exception if board is null
==> passed

Test 11a: call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 11b: call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12a: call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 12b: call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13a: call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 13b: call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14a: call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 14b: call solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 2936 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.60
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 3616 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.60
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4296 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.60
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)                                                                  
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Maximum allowed time per puzzle is 10.0 seconds.

Running 125 total tests.

Test 1: measure CPU time and check for correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.01 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.01 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.02 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.02 
=> passed  puzzle30.txt      30    3     0.03 
=> passed  puzzle31.txt      31    3     0.03 
=> passed  puzzle39.txt      39    4     0.49 
=> passed  puzzle41.txt      41    5     0.04 
=> passed  puzzle34.txt      34    4     0.13 
=> passed  puzzle37.txt      37    4     0.15 
=> passed  puzzle44.txt      44    5     0.10 
=> passed  puzzle32.txt      32    4     1.48 
=> passed  puzzle35.txt      35    4     0.30 
=> passed  puzzle33.txt      33    4     0.27 
=> passed  puzzle43.txt      43    4     0.61 
=> passed  puzzle46.txt      46    4     0.62 
=> passed  puzzle40.txt      40    4     0.66 
=> passed  puzzle36.txt      36    4     1.23 
=> passed  puzzle45.txt      45    4     0.83 
==> 25/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
=> passed  puzzle20.txt       1270              760              511         
=> passed  puzzle22.txt       2951             1743             1209         
=> passed  puzzle21.txt       4853             2860             1994         
=> passed  puzzle23.txt       7424             4431             2994         
=> passed  puzzle24.txt       5725             3441             2285         
=> passed  puzzle25.txt      10830             6429             4402         
=> passed  puzzle27.txt      11779             7091             4689         
=> FAILED  puzzle29.txt      25049   (1.4x)   15008   (1.4x)   10042   (1.5x)
=> passed  puzzle26.txt      13208             7875             5334         
=> passed  puzzle28.txt      23157            13872             9286         
=> passed  puzzle30.txt      42141            25463            16679         
=> passed  puzzle31.txt      41174            24756            16419         
=> FAILED  puzzle39.txt     544867   (5.1x)  266262   (5.1x)  278606   (5.1x)
=> passed  puzzle41.txt      63117            26659            36459         
=> FAILED  puzzle34.txt     270266   (1.2x)  129997   (1.2x)  140270   (1.2x)
=> FAILED  puzzle37.txt     290824   (1.2x)  139449   (1.2x)  151376   (1.2x)
=> passed  puzzle44.txt     151576            67343            84234         
=> FAILED  puzzle32.txt    2239484   (2.9x) 1065163   (2.8x) 1174322   (2.9x)
=> passed  puzzle35.txt     550435           267674           282762         
=> passed  puzzle33.txt     529425           252306           277120         
=> passed  puzzle43.txt    1194331           576567           617765         
=> passed  puzzle46.txt    1187683           591596           596088         
=> passed  puzzle40.txt    1269942           620018           649925         
=> passed  puzzle36.txt    2283713          1091940          1191774         
=> passed  puzzle45.txt    1054801           515556           539246         
==> 20/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0         
=> passed  puzzle22.txt            0            0            0         
=> passed  puzzle21.txt            0            0            0         
=> passed  puzzle23.txt            0            0            0         
=> passed  puzzle24.txt            0            0            0         
=> passed  puzzle25.txt            0            0            0         
=> passed  puzzle27.txt            0            0            0         
=> passed  puzzle29.txt            0            0            0         
=> passed  puzzle26.txt            0            0            0         
=> passed  puzzle28.txt            0            0            0         
=> passed  puzzle30.txt            0            0            0         
=> passed  puzzle31.txt            0            0            0         
=> passed  puzzle39.txt            0            0            0         
=> passed  puzzle41.txt            0            0            0         
=> passed  puzzle34.txt            0            0            0         
=> passed  puzzle37.txt            0            0            0         
=> passed  puzzle44.txt            0            0            0         
=> passed  puzzle32.txt            0            0            0         
=> passed  puzzle35.txt            0            0            0         
=> passed  puzzle33.txt            0            0            0         
=> passed  puzzle43.txt            0            0            0         
=> passed  puzzle46.txt            0            0            0         
=> passed  puzzle40.txt            0            0            0         
=> passed  puzzle36.txt            0            0            0         
=> passed  puzzle45.txt            0            0            0         
==> 25/25 tests passed



Test 4: count Board operations (that should get called)

               filename    Board()         manhattan()
------------------------------------------------------
=> passed  puzzle20.txt       2027                2030         
=> passed  puzzle22.txt       4691                4694         
=> passed  puzzle21.txt       7710                7713         
=> passed  puzzle23.txt      11852               11855         
=> passed  puzzle24.txt       9163                9166         
=> passed  puzzle25.txt      17256               17259         
=> passed  puzzle27.txt      18867               18870         
=> FAILED  puzzle29.txt      40054   (1.4x)      40057         
=> passed  puzzle26.txt      21080               21083         
=> passed  puzzle28.txt      37026               37029         
=> passed  puzzle30.txt      67601               67604         
=> passed  puzzle31.txt      65927               65930         
=> FAILED  puzzle39.txt     811126   (5.1x)     811129         
=> passed  puzzle41.txt      89773               89776         
=> FAILED  puzzle34.txt     400260   (1.2x)     400263         
=> FAILED  puzzle37.txt     430270   (1.2x)     430273         
=> passed  puzzle44.txt     218916              218919         
=> FAILED  puzzle32.txt    3304644   (2.9x)    3304647         
=> passed  puzzle35.txt     818106              818109         
=> passed  puzzle33.txt     781728              781731         
=> passed  puzzle43.txt    1770895             1770898         
=> passed  puzzle46.txt    1779276             1779279         
=> passed  puzzle40.txt    1889957             1889960         
=> passed  puzzle36.txt    3375650             3375653         
=> passed  puzzle45.txt    1570354             1570357         
==> 20/25 tests passed



Test 5: count Board operations (that should get called),
        rejecting if doesn't adhere to stricter caching limits

               filename    Board()         manhattan()
------------------------------------------------------
=> passed  puzzle20.txt       2027                2030         
=> passed  puzzle22.txt       4691                4694         
=> passed  puzzle21.txt       7710                7713         
=> passed  puzzle23.txt      11852               11855         
=> passed  puzzle24.txt       9163                9166         
=> passed  puzzle25.txt      17256               17259         
=> passed  puzzle27.txt      18867               18870         
=> FAILED  puzzle29.txt      40054   (1.4x)      40057   (1.4x)
=> passed  puzzle26.txt      21080               21083         
=> passed  puzzle28.txt      37026               37029         
=> passed  puzzle30.txt      67601               67604         
=> passed  puzzle31.txt      65927               65930         
=> FAILED  puzzle39.txt     811126   (5.1x)     811129   (5.1x)
=> passed  puzzle41.txt      89773               89776         
=> FAILED  puzzle34.txt     400260   (1.2x)     400263   (1.2x)
=> FAILED  puzzle37.txt     430270   (1.2x)     430273   (1.2x)
=> passed  puzzle44.txt     218916              218919         
=> FAILED  puzzle32.txt    3304644   (2.9x)    3304647   (2.9x)
=> passed  puzzle35.txt     818106              818109         
=> passed  puzzle33.txt     781728              781731         
=> passed  puzzle43.txt    1770895             1770898         
=> passed  puzzle46.txt    1779276             1779279         
=> passed  puzzle40.txt    1889957             1889960         
=> passed  puzzle36.txt    3375650             3375653         
=> passed  puzzle45.txt    1570354             1570357         
==> 20/25 tests passed


Total: 110/125 tests passed!


================================================================



